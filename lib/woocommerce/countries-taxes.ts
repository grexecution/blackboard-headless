import { wooClient } from './client'

export interface Country {
  code: string
  name: string
  states?: { [key: string]: string }
}

export interface TaxRate {
  id: number
  country: string
  state: string
  postcode: string
  city: string
  rate: string
  name: string
  priority: number
  compound: boolean
  shipping: boolean
  order: number
  class: string
}

// Fetch all countries from WooCommerce
export async function getAllCountries(): Promise<Country[]> {
  try {
    const data = await wooClient.request<any>('/data/countries')

    // WooCommerce returns an array-like object where each item has the country code inside
    // Example: { '0': { code: 'AF', name: 'Afghanistan', states: [] }, '1': { code: 'EG', ... } }
    const countries: Country[] = Object.values(data).map((countryData: any) => ({
      code: countryData.code,
      name: countryData.name,
      states: countryData.states || {}
    }))

    return countries
  } catch (error) {
    console.error('Error fetching countries:', error)
    return []
  }
}

// Fetch all tax rates from WooCommerce
export async function getAllTaxRates(): Promise<TaxRate[]> {
  try {
    const data = await wooClient.request<TaxRate[]>('/taxes?per_page=100')
    return data
  } catch (error) {
    console.error('Error fetching tax rates:', error)
    return []
  }
}

// Calculate tax for a given country, state, and amount
export function calculateTax(
  amount: number,
  country: string,
  state: string,
  taxRates: TaxRate[]
): { taxAmount: number; taxRate: number } {
  // Find matching tax rate - prioritize exact country match
  const matchingRate = taxRates.find(rate => {
    // Match country exactly
    if (rate.country !== country) {
      // If there's a wildcard rate (empty country), we'll use it as fallback
      if (rate.country !== '') return false
    }

    // Match state if specified in the tax rate
    if (rate.state && rate.state !== state) return false

    return true
  })

  if (!matchingRate) {
    return { taxAmount: 0, taxRate: 0 }
  }

  const taxRate = parseFloat(matchingRate.rate)

  // Prices include tax, so we need to extract the tax amount
  // Formula: tax = (price * rate) / (100 + rate)
  const taxAmount = (amount * taxRate) / (100 + taxRate)

  return { taxAmount, taxRate }
}

// Get net price (excluding tax) from gross price (including tax)
export function getNetPrice(grossPrice: number, taxRate: number): number {
  return grossPrice / (1 + taxRate / 100)
}

// Country emoji flags mapping
export const countryFlags: { [key: string]: string } = {
  'US': 'ğŸ‡ºğŸ‡¸',
  'GB': 'ğŸ‡¬ğŸ‡§',
  'DE': 'ğŸ‡©ğŸ‡ª',
  'FR': 'ğŸ‡«ğŸ‡·',
  'IT': 'ğŸ‡®ğŸ‡¹',
  'ES': 'ğŸ‡ªğŸ‡¸',
  'CA': 'ğŸ‡¨ğŸ‡¦',
  'AU': 'ğŸ‡¦ğŸ‡º',
  'NZ': 'ğŸ‡³ğŸ‡¿',
  'JP': 'ğŸ‡¯ğŸ‡µ',
  'CN': 'ğŸ‡¨ğŸ‡³',
  'IN': 'ğŸ‡®ğŸ‡³',
  'BR': 'ğŸ‡§ğŸ‡·',
  'MX': 'ğŸ‡²ğŸ‡½',
  'AR': 'ğŸ‡¦ğŸ‡·',
  'CL': 'ğŸ‡¨ğŸ‡±',
  'CO': 'ğŸ‡¨ğŸ‡´',
  'PE': 'ğŸ‡µğŸ‡ª',
  'AT': 'ğŸ‡¦ğŸ‡¹',
  'BE': 'ğŸ‡§ğŸ‡ª',
  'BG': 'ğŸ‡§ğŸ‡¬',
  'HR': 'ğŸ‡­ğŸ‡·',
  'CY': 'ğŸ‡¨ğŸ‡¾',
  'CZ': 'ğŸ‡¨ğŸ‡¿',
  'DK': 'ğŸ‡©ğŸ‡°',
  'EE': 'ğŸ‡ªğŸ‡ª',
  'FI': 'ğŸ‡«ğŸ‡®',
  'GR': 'ğŸ‡¬ğŸ‡·',
  'HU': 'ğŸ‡­ğŸ‡º',
  'IE': 'ğŸ‡®ğŸ‡ª',
  'LV': 'ğŸ‡±ğŸ‡»',
  'LT': 'ğŸ‡±ğŸ‡¹',
  'LU': 'ğŸ‡±ğŸ‡º',
  'MT': 'ğŸ‡²ğŸ‡¹',
  'NL': 'ğŸ‡³ğŸ‡±',
  'PL': 'ğŸ‡µğŸ‡±',
  'PT': 'ğŸ‡µğŸ‡¹',
  'RO': 'ğŸ‡·ğŸ‡´',
  'SK': 'ğŸ‡¸ğŸ‡°',
  'SI': 'ğŸ‡¸ğŸ‡®',
  'SE': 'ğŸ‡¸ğŸ‡ª',
  'CH': 'ğŸ‡¨ğŸ‡­',
  'NO': 'ğŸ‡³ğŸ‡´',
  'IS': 'ğŸ‡®ğŸ‡¸',
  'TR': 'ğŸ‡¹ğŸ‡·',
  'RU': 'ğŸ‡·ğŸ‡º',
  'UA': 'ğŸ‡ºğŸ‡¦',
  'IL': 'ğŸ‡®ğŸ‡±',
  'SA': 'ğŸ‡¸ğŸ‡¦',
  'AE': 'ğŸ‡¦ğŸ‡ª',
  'ZA': 'ğŸ‡¿ğŸ‡¦',
  'EG': 'ğŸ‡ªğŸ‡¬',
  'NG': 'ğŸ‡³ğŸ‡¬',
  'KE': 'ğŸ‡°ğŸ‡ª',
  'KR': 'ğŸ‡°ğŸ‡·',
  'SG': 'ğŸ‡¸ğŸ‡¬',
  'MY': 'ğŸ‡²ğŸ‡¾',
  'TH': 'ğŸ‡¹ğŸ‡­',
  'VN': 'ğŸ‡»ğŸ‡³',
  'PH': 'ğŸ‡µğŸ‡­',
  'ID': 'ğŸ‡®ğŸ‡©',
  'PK': 'ğŸ‡µğŸ‡°',
  'BD': 'ğŸ‡§ğŸ‡©',
}

// Top countries for quick select (popular e-commerce markets)
export const topCountries = [
  'US', // United States
  'GB', // United Kingdom
  'DE', // Germany
  'CA', // Canada
  'AU', // Australia
  'FR', // France
  'IT', // Italy
  'ES', // Spain
  'NL', // Netherlands
  'BE', // Belgium
  'AT', // Austria
  'CH', // Switzerland
]
